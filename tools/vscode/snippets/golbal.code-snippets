{
  // 全局
  // ==============================================================================================
  "获取当前目录": {
    "prefix": "pwd",
    "body": ["$TM_DIRECTORY"],
    "description": "获取当前目录"
  },
  "获取当前文件名": {
    "prefix": "filename",
    "body": ["$TM_FILENAME"],
    "description": "获取当前文件名"
  },
  "当前时间": {
    "prefix": "time",
    "body": ["$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"],
    "description": "获取当前时间"
  },
  "当前时间1": {
    "prefix": "date",
    "body": ["$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE "],
    "description": "获取当前时间"
  },
  "当前时间2": {
    "prefix": "sdate",
    "body": [
      "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"
    ],
    "description": "获取当前时间"
  },
  "阿帕奇协议": {
    "prefix": "apache",
    "body": [
      "/*",
      " * Licensed to the Apache Software Foundation (ASF) under one or more",
      " * contributor license agreements.  See the NOTICE file distributed with",
      " * this work for additional information regarding copyright ownership.",
      " * The ASF licenses this file to You under the Apache License, Version 2.0",
      " * (the \"License\"); you may not use this file except in compliance with",
      " * the License.  You may obtain a copy of the License at",
      " *",
      " *     http://www.apache.org/licenses/LICENSE-2.0",
      " *",
      " * Unless required by applicable law or agreed to in writing, software",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      " * See the License for the specific language governing permissions and",
      " * limitations under the License.",
      " */"
    ]
  },
  // ==============================================================================================
  // python
  // ==============================================================================================
  "self_python_header": {
    "scope": "python",
    "prefix": "sheader",
    "body": [
      "#!/usr/bin/env python3",
      "# -*- encoding: utf-8 -*-",
      "\"\"\"",
      "@file : $TM_FILENAME",
      "@desc : 脚本运行方式 [python3 $TM_FILENAME]",
      "        脚本说明:$0",
      "@date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      "@auth : danao",
      "@version : 1.0",
      "\"\"\"",
      ""
    ],
    "description": "创建一个[main]函数"
  },
  "self_python_logging": {
    "scope": "python",
    "prefix": "imlog",
    "body": [
      "import os",
      "import sys",
      "",
      "from loguru import logger",
      "",
      "# 日志级别，DEBUG或INFO",
      "level = os.getenv(\"DEBUG\", \"\").lower() in (\"true\", \"1\", \"t\") and \"DEBUG\" or \"INFO\"",
      "# 移除默认的handler",
      "logger.remove()",
      "# 输出到控制台和文件",
      "logger.add(sys.stderr, level=level)",
      "logger.add(f\"{os.path.splitext(os.path.basename(__file__))[0]}.log\", level=level)"
    ],
    "description": "导入 logging 模块"
  },
  "self_python_mysql": {
    "scope": "python",
    "prefix": "smysql",
    "body": [
      "class DB:",
      "    \"\"\"",
      "    数据库连接类",
      "    \"\"\"",
      "",
      "    def __init__(self, host, port, db, user, passwd, charset):",
      "        self.conn = None",
      "        self.cur = None",
      "        self.connect(host, port, db, user, passwd, charset)",
      "",
      "    def connect(self, host, port, db, user, passwd, charset):",
      "        try:",
      "            self.conn = pymysql.connect(",
      "                host=host, port=port, db=db, user=user, passwd=passwd, charset=charset , init_command=\"SET NAMES utf8mb4\"",
      "            )",
      "            self.cur = self.conn.cursor(cursor=pymysql.cursors.DictCursor)",
      "            logger.debug(",
      "                f\"数据库连接成功: host={host}, port={port}, db={db}, user={user}\")",
      "        except pymysql.err.OperationalError as e:",
      "            logger.error(f\"数据库连接失败：{e}\")",
      "            logger.error(",
      "                f\"连接参数：host={host}, port={port}, db={db}, user={user}\")",
      "            raise",
      "        except pymysql.MySQLError as e:",
      "            logger.error(f\"MySQL 错误：{e}\")",
      "            raise",
      "        except Exception as e:",
      "            logger.error(f\"未知错误：{e}\")",
      "            raise",
      "",
      "    def __enter__(self):",
      "        return self.cur",
      "",
      "    def __exit__(self, exc_type, exc_val, exc_tb):",
      "        if self.conn:",
      "            self.conn.commit()",
      "        if self.cur:",
      "            self.cur.close()",
      "        if self.conn:",
      "            self.conn.close()",
      "",
      "def get_db_conn():",
      "    host = os.getenv(\"DATABASE_HOST\", \"localhost\")",
      "    port = int(os.getenv(\"DATABASE_PORT\", 3306))",
      "    database = os.getenv(\"DATABASE_NAME\", \"\")",
      "    password = os.getenv(\"DATABASE_PASSWORD\", \"\")",
      "    user = os.getenv(\"DATABASE_USERNAME\", \"root\")",
      "    db = DB(host, port, database, user, password, charset=\"utf8mb4\")",
      "    return db",
      "",
      "def mysql_version():",
      "    db = get_db_conn()",
      "    cur = db.cur",
      "    # 获取 mysql 版本",
      "    try:",
      "        cur.execute(\"select version();\")",
      "        result = cur.fetchone()",
      "        logger.info(result)",
      "    except Exception as e:",
      "        logger.error(e)"
    ],
    "description": "创建一个 mysql 连接类"
  },
  "self_python_sqlite": {
    "scope": "python",
    "prefix": "ssqlite",
    "body": [
      "class SQLiteDB:",
      "    \"\"\"",
      "    SQLite 数据库连接类",
      "    \"\"\"",
      "",
      "    def __init__(self, db_path):",
      "        \"\"\"",
      "        初始化数据库连接",
      "        :param db_path: SQLite 数据库文件路径，如 \"example.db\"，或 \":memory:\" 表示内存数据库",
      "        \"\"\"",
      "        self.conn = None",
      "        self.cur = None",
      "        self.connect(db_path)",
      "",
      "    def connect(self, db_path):",
      "        try:",
      "            self.conn = sqlite3.connect(db_path)",
      "            self.conn.row_factory = sqlite3.Row  # 返回字典形式的结果",
      "            self.cur = self.conn.cursor()",
      "            logger.debug(f\"SQLite 数据库连接成功: path={db_path}\")",
      "        except sqlite3.Error as e:",
      "            logger.error(f\"SQLite 数据库连接失败：{e}\")",
      "            raise",
      "        except Exception as e:",
      "            logger.error(f\"未知错误：{e}\")",
      "            raise",
      "",
      "    def __enter__(self):",
      "        return self.cur",
      "",
      "    def __exit__(self, exc_type, exc_val, exc_tb):",
      "        if self.conn:",
      "            if exc_type is None:",
      "                self.conn.commit()",
      "            else:",
      "                self.conn.rollback()",
      "        if self.cur:",
      "            self.cur.close()",
      "        if self.conn:",
      "            self.conn.close()",
      "",
      "def get_sqlite_conn():",
      "    db_path = os.getenv(\"SQLITE_DB_PATH\", \"example.db\")",
      "    db = SQLiteDB(db_path)",
      "    return db",
      "",
      "def sqlite_version():",
      "    db = get_sqlite_conn()",
      "    cur = db.cur",
      "    try:",
      "        cur.execute(\"SELECT sqlite_version();\")",
      "        result = cur.fetchone()",
      "        logger.info(f\"SQLite 版本: {result[0]}\")",
      "    except Exception as e:",
      "        logger.error(e)"
    ],
    "description": "创建一个 sqlite 连接类"
  },
  "self_python_main": {
    "scope": "python",
    "prefix": "smain",
    "body": [
      "def main():",
      "\t\"\"\"",
      "\t${1:主要是处理}",
      "\t\"\"\"",
      "\tprint(\"hello world!\")",
      "\t$0",
      "",
      "if __name__ == \"__main__\":",
      "\tmain()"
    ],
    "description": "创建一个[main]函数"
  },
  "self_python_var": {
    "scope": "python",
    "prefix": "svar",
    "body": ["${1:var_name} = ${2:\"\"}"],
    "description": "创建一个变量"
  },
  "self_python_args": {
    "scope": "python",
    "prefix": "sargs",
    "body": [
      "def conf_args():",
      "    \"\"\"函数的作用是:",
      "    获取用户指定参数输入",
      "    Returns:",
      "        return res 返回用户输入的参数字典",
      "    Raises:",
      "        列出与接口有关的所有异常.",
      "    \"\"\"",
      "    name = os.path.basename(__file__)",
      "    args = argparse.ArgumentParser(",
      "        description=f'脚本[{name}]执行中的参数介绍', epilog='请按照以上说明执行脚本')",
      "    # 配置参数和说明",
      "    args.add_argument(\"-i\", \"--info\", type=str,",
      "                      help=\"演示参数 info\", default=\"None\")",
      "    args = args.parse_args()",
      "    # print(f\"args = [{args}]\")",
      "    # 使用方式  args.info 即可获取到参数值  如果有 dest 配置则读取dest 无则读取 -- 后面的属性配置",
      "    return args"
    ],
    "description": "创建一个参数解析函数"
  },
  "self_python_exception": {
    "scope": "python",
    "prefix": "stry",
    "body": [
      "try:",
      "    ${1}",
      "except Exception as e:",
      "    print(f\"处理异常,e = [{e}]\")"
    ],
    "description": "创建异常语句"
  },
  "self_python_function": {
    "scope": "python",
    "prefix": "smethod",
    "body": [
      "def ${1:function}(self):",
      "    print(\"函数  ${1:function} 执行\")"
    ],
    "description": "创建一个函数"
  },
  "self_python_def": {
    "scope": "python",
    "prefix": "sfunc",
    "body": ["def ${1:function}():", "    print(\"函数  ${1:function} 执行\")"],
    "description": "创建一个函数"
  },
  "self_python_array": {
    "scope": "python",
    "prefix": "sarr",
    "body": ["arr = [$1]"],
    "description": "创建一个[数组]结构"
  },
  "self_python_list": {
    "scope": "python",
    "prefix": "slist",
    "body": ["list = [$1]"],
    "description": "创建一个[list]结构"
  },
  "self_python_set": {
    "scope": "python",
    "prefix": "sset",
    "body": ["set = set()", "set.add($1)"],
    "description": "创建一个[set]结构"
  },
  "self_python_map": {
    "scope": "python",
    "prefix": "smap",
    "body": ["map = {'key':'value',$1:$2}"],
    "description": "创建一个[map]结构"
  },
  "self_python_now": {
    "scope": "python",
    "prefix": "snow",
    "body": ["datetime.datetime.now(None).strftime('%Y-%m-%d %H:%M:%S')"],
    "description": "获取当前时间"
  },
  "self_python_log": {
    "scope": "python",
    "prefix": "slog",
    "body": ["${1:logger}.info(f\"${2:var_name} = {${2:var_name}}\")"],
    "description": "创建一个日志"
  },
  "self_python_print": {
    "scope": "python",
    "prefix": "sout",
    "body": ["print(f\"$1 = [{$1}]\")"],
    "description": "创建一个打印输出"
  },
  "self_python_string": {
    "scope": "python",
    "prefix": "sstr",
    "body": ["${1:str} = f\"{${2:var}}\""],
    "description": "创建一个字符串变量替换"
  },
  "self_python_object": {
    "scope": "python",
    "prefix": "sobject",
    "body": [""],
    "description": "创建一个[object]结构"
  },
  "self_python_tojson": {
    "scope": "python",
    "prefix": "tojson",
    "body": [
      "$1_json_str = json.dumps($1, ensure_ascii=False, default=str, indent=2)"
    ],
    "description": "obj 转 json"
  },
  "self_python_toobj": {
    "scope": "python",
    "prefix": "toobj",
    "body": ["json.loads($1)"],
    "description": "json 转 obj"
  },
  "self_python_class_note": {
    "scope": "python",
    "prefix": "//class",
    "body": [
      "\"\"\"${1:类一句话介绍}",
      "类的作用是:",
      "    ${2:类主要是处理}",
      "    ",
      "Attributes:",
      "    ${3:params}: ${4:type}",
      "\"\"\""
    ],
    "description": "类注释"
  },
  "self_python_method_note": {
    "scope": "python",
    "prefix": "//method",
    "body": [
      "\"\"\"${1:函数的作用是:} ",
      "Args:",
      "    ${2:params}:${3:type}",
      "Returns:",
      "    return ${4:res}",
      "Raises:",
      "    列出与接口有关的所有异常.",
      "\"\"\""
    ],
    "description": "函数注释"
  },
  "self_python_post_request": {
    "scope": "python",
    "prefix": "spost",
    "body": [
      "try:",
      "    # 需要导入 requests 和 json",
      "    url = f\"http: //localhost:8080/path\"",
      "    # 请求数据",
      "    data = {",
      "        \"key\": \"value\"",
      "    }",
      "    payload = json.dumps(data)",
      "    headers = {",
      "        'Content-Type': 'application/json',",
      "        'Accept': '*/*'",
      "    }",
      "    response = requests.request(\"POST\", url, headers=headers, data=payload, verify=False)",
      "    print(response.text)",
      "except Exception as e:",
      "    print(e)"
    ],
    "description": "发送post请求模板"
  },
  // ==============================================================================================
  // php
  // ==============================================================================================
  "self_php_header": {
    "scope": "php",
    "prefix": "sheader",
    "body": [
      "/**",
      " * @file : $TM_FILENAME",
      " * @desc : 脚本执行方式 [php $TM_FILENAME]",
      " *         脚本说明:$0",
      " * @date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      " * @auth : test",
      " * @version : 1.0",
      " */",
      ""
    ],
    "description": "创建一个[main]函数"
  },
  "self_php_main": {
    "scope": "php",
    "prefix": "smain",
    "body": [
      "// main 函数",
      "function main() {",
      "\techo \"hello world!\" . PHP_EOL;",
      "}",
      "",
      "main();"
    ],
    "description": "创建一个[main]函数"
  },
  "self_php_array": {
    "scope": "php",
    "prefix": "sarr",
    "body": ["\\$arr = array();"],
    "description": "创建一个[数组]结构"
  },
  "self_php_list": {
    "scope": "php",
    "prefix": "slist",
    "body": ["\\$list = array();"],
    "description": "创建一个[list]结构"
  },
  "self_php_set": {
    "scope": "php",
    "prefix": "sset",
    "body": ["\\$set = array();"],
    "description": "创建一个[set]结构"
  },
  "self_php_map": {
    "scope": "php",
    "prefix": "smap",
    "body": ["\\$map = array();"],
    "description": "创建一个[map]结构"
  },
  "self_php_now": {
    "scope": "php",
    "prefix": "snow",
    "body": [""],
    "description": "获取当前时间"
  },
  "self_php_log": {
    "scope": "php",
    "prefix": "slog",
    "body": [
      "error_log(\"[\" . __FILE__ . \" :\" . __CLASS__ . \":\" . __METHOD__ . \":\" . __LINE__ . \"] ===> \" . \"[\\$$1]\");"
    ],
    "description": "创建一个日志"
  },
  "self_php_print": {
    "scope": "php",
    "prefix": "sout",
    "body": ["echo \\$$1 . PHP_EOL;"],
    "description": "创建一个打印输出"
  },
  "self_php_object": {
    "scope": "php",
    "prefix": "sobject",
    "body": [""],
    "description": "创建一个[object]结构"
  },
  "self_php_tojson": {
    "scope": "php",
    "prefix": "tojson",
    "body": [
      "\\$json = json_encode(\\$${1:params},JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);"
    ],
    "description": "obj 转 json"
  },
  "self_php_toobj": {
    "scope": "php",
    "prefix": "toobj",
    "body": [""],
    "description": "json 转 obj"
  },
  "self_php_class_note": {
    "scope": "php",
    "prefix": "//class",
    "body": [
      "/**",
      " * @desc ${1:该类的主要作用是}",
      " * @date $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      " * @author danao",
      " * @version 1.0",
      " * @since 1.0",
      " */"
    ],
    "description": "类注释"
  },
  "self_php_method_note": {
    "scope": "php",
    "prefix": "//method",
    "body": [
      "/**",
      " * ${1:函数主要是处理}",
      " *",
      " * @param  ${2:void} ",
      " * @return ${3:void}",
      " * @throws ${4:null}",
      " */"
    ],
    "description": "函数注释"
  },
  "self_php_field_note": {
    "scope": "php",
    "prefix": "//field",
    "body": ["/**", " * @var ${1:type}", " */"],
    "description": "类属性注释"
  },
  "self_php_constr": {
    "scope": "php",
    "prefix": "construct",
    "body": [
      "/**",
      " * 构造函数",
      " *",
      " * @param  void ",
      " * @throws null",
      " */",
      "public function __construct() {",
      "    // 各种初始化",
      "}"
    ],
    "description": "类属性注释"
  },
  // ==============================================================================================
  // shellscrript
  // ==============================================================================================
  "self_shell_header": {
    "scope": "shellscript",
    "prefix": "sheader",
    "body": [
      "#!/bin/env bash",
      "",
      "###########################################################",
      "# @file : $TM_FILENAME",
      "# @desc : 脚本执行方式 [bash $TM_FILENAME]",
      "#         脚本说明:$0",
      "# @date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      "# @auth : test",
      "# @version : 1.0",
      "###########################################################",
      "",
      "# 调试模式配置区 ==========================================",
      "# set -o xtrace      # 开启命令回显（执行时显示每条命令）",
      "# set -x # 等效写法，建议二选一使用",
      "",
      "# 错误处理配置区 ==========================================",
      "set -e          # 启用errexit选项：任何命令返回非0状态立即退出脚本",
      "set -u          # 启用nounset选项：使用未定义变量时立即报错退出",
      "set -o pipefail # 启用管道失败检测：管道中任一命令失败则整体返回失败",
      "",
      "# 日志记录配置区 ==========================================",
      "# 调试时建议开启以下配置（生产环境应注释掉）",
      "# exec >>\"${0}.log\" 2>&1    # 将标准输出(stdout)和标准错误(stderr)",
      "# 重定向到与脚本同名的日志文件（追加模式）",
      "# 注意：${0}表示当前执行的脚本文件名"
    ],
    "description": "创建一个[main]函数"
  },
  "self_shell_main": {
    "scope": "shellscript",
    "prefix": "smain",
    "body": [
      "main() {",
      "    echo \"hello world\"",
      "    exit 0",
      "}",
      "main \"$@\""
    ],
    "description": "创建一个[main]函数"
  },
  "self_shell_args": {
    "scope": "shellscript",
    "prefix": "sargs",
    "body": [
      "function exec_args() {",
      "    #######################################",
      "    # 函数的作用是: 配置脚本输入参数",
      "    # -i 表示输入的参数",
      "    # main 中调用的方式 exec_args \\$*",
      "    #######################################",
      "    # :v 表示 -v 后不需要加参数 v: 表示 -v 后需要添加参数",
      "    # 使用 getopts 解析命令行参数",
      "    while getopts \":hvi:\" opt; do",
      "        # 使用OPTARG变量获取选项参数",
      "        case \"\\$opt\" in",
      "        h)",
      "            echo \"帮助信息\"",
      "            echo \"使用: \\$0 [选项]\"",
      "            echo \"选项:\"",
      "            echo \"  -h    显示帮助信息\"",
      "            echo \"  -v    显示版本号\"",
      "            echo \"  -i    输入内容\"",
      "            exit 0",
      "            ;;",
      "        v)",
      "            echo \"版本号\"",
      "            exit 0",
      "            ;;",
      "        i)",
      "            echo \"输入内容为: \\$OPTARG\"",
      "            ;;",
      "        \\?)",
      "            echo \"无效的参数: \\$OPTARG\" >&2",
      "            exit 1",
      "            ;;",
      "        esac",
      "    done",
      "}"
    ],
    "description": "创建一个获取用户输入[args]函数"
  },
  "self_shell_path": {
    "scope": "shellscript",
    "prefix": "spath",
    "body": [
      "# 获取当前脚本所在的文件目录",
      "path=\\$(",
      "    cd $(dirname \\${BASH_SOURCE[0]})",
      "    pwd",
      ")",
      "echo \"当前脚本所在的文件目录是[\\${path}]\""
    ],
    "description": "获取当前脚本执行的 path"
  },
  "self_shell_fun": {
    "scope": "shellscript",
    "prefix": "sfunc",
    "body": ["# $1", "function $1() {", "    echo \"$1() 执行...\"", "}", ""],
    "description": "创建一个[main]函数"
  },
  "self_shell_array": {
    "scope": "shellscript",
    "prefix": "sarr",
    "body": [
      "# 创建一个字符串数组",
      "arr=(a 'bb' \"字符串3\")",
      "# 遍历数组并输出",
      "for it in \"\\${arr[@]}\"; do",
      "    echo \"\\${it}\"",
      "done"
    ],
    "description": "创建一个[数组]结构"
  },
  "self_shell_list": {
    "scope": "shellscript",
    "prefix": "slist",
    "body": [],
    "description": "创建一个[list]结构"
  },
  "self_shell_set": {
    "scope": "shellscript",
    "prefix": "sset",
    "body": [""],
    "description": "创建一个[set]结构"
  },
  "self_shell_map": {
    "scope": "shellscript",
    "prefix": "smap",
    "body": [""],
    "description": "创建一个[map]结构"
  },
  "self_shell_now": {
    "scope": "shellscript",
    "prefix": "snow",
    "body": ["now=$(date +\"%F %T\")"],
    "description": "获取当前时间"
  },
  "self_shell_log": {
    "scope": "shellscript",
    "prefix": "slog",
    "body": ["log INFO \"$1\""],
    "description": "创建一个日志"
  },
  "self_shell_logs": {
    "scope": "shellscript",
    "prefix": "imlog",
    "body": [
      "# 获取脚本名称并设置日志文件路径",
      "SCRIPT_NAME=\\$(basename \"\\$0\" .sh)",
      "LOG_FILE=\"\\${SCRIPT_NAME}.log\"",
      "",
      "# 定义日志函数 (兼容旧版 Bash)",
      "log() {",
      "    local level",
      "    local msg",
      "",
      "    # 参数解析",
      "    if [ \\$# -eq 1 ]; then",
      "        level=\"INFO\"",
      "        msg=\"\\$1\"",
      "    elif [ \\$# -eq 2 ]; then",
      "        # 手动转换为大写 (兼容旧版 Bash)",
      "        level=\\$(echo \"\\$1\" | tr '[:lower:]' '[:upper:]')",
      "        msg=\"\\$2\"",
      "    else",
      "        echo \"错误：log函数参数数量错误\" >&2",
      "        return 1",
      "    fi",
      "",
      "    # 日志级别到数字的映射 (兼容旧版 Bash)",
      "    local level_num",
      "    case \"\\$level\" in",
      "        DEBUG) level_num=0 ;;",
      "        INFO) level_num=1 ;;",
      "        WARN) level_num=2 ;;",
      "        ERROR) level_num=3 ;;",
      "        *)",
      "            echo \"[\\$(date \"+%Y-%m-%d %H:%M:%S\")][ERROR]: 无效日志级别: \\$level\" >&2",
      "            return 1",
      "            ;;",
      "    esac",
      "",
      "    # 设置日志阈值 (兼容旧版 Bash)",
      "    local log_threshold=1",
      "    # 检查 DEBUG 环境变量 (不区分大小写)",
      "    if [ -n \"\\$DEBUG\" ]; then",
      "        local debug_lower",
      "        debug_lower=\\$(echo \"\\$DEBUG\" | tr '[:upper:]' '[:lower:]')",
      "        if [ \"\\$debug_lower\" = \"true\" ] || [ \"\\$debug_lower\" = \"1\" ]; then",
      "            log_threshold=0",
      "        fi",
      "    fi",
      "",
      "    # 判断是否需要记录",
      "    if [ \\$level_num -lt \\$log_threshold ]; then",
      "        return",
      "    fi",
      "",
      "    # 构造并输出日志",
      "    local timestamp",
      "    timestamp=\\$(date \"+%Y-%m-%d %H:%M:%S\")",
      "    echo \"[\\${timestamp}][\\${level}]: \\${msg}\" | tee -a \"\\$LOG_FILE\"",
      "}",
      "",
      "# 测试用例",
      "log \"默认INFO日志\"",
      "log debug \"DEBUG级别测试\"",
      "log INFO \"标准信息日志\"",
      "log warn \"警告日志\"",
      "log error \"错误日志\"",
      ""
    ],
    "description": "创建一个日志"
  },
  "self_shell_print": {
    "scope": "shellscript",
    "prefix": "sout",
    "body": ["echo \"${1:var} = [\\${${1:var}}]\""],
    "description": "创建一个打印输出"
  },
  "self_shell_object": {
    "scope": "shellscript",
    "prefix": "sobject",
    "body": [""],
    "description": "创建一个[object]结构"
  },
  "self_shell_tojson": {
    "scope": "shellscript",
    "prefix": "tojson",
    "body": [""],
    "description": "obj 转 json"
  },
  "self_shell_toobj": {
    "scope": "shellscript",
    "prefix": "toobj",
    "body": [""],
    "description": "json 转 obj"
  },
  "self_shell_method_note": {
    "scope": "shellscript",
    "prefix": "//method",
    "body": [
      "#######################################",
      "# ${1:函数的作用是:}",
      "# Globals:",
      "#   ${2:无全局参数说明}",
      "# Arguments:",
      "#   ${3:函数参数说明}",
      "# Returns:",
      "#   ${4:返回值为空}",
      "#######################################"
    ],
    "description": "函数注释"
  },
  // ==============================================================================================
  // go
  // ==============================================================================================
  "self_go_header": {
    "scope": "go",
    "prefix": "sheader",
    "body": [
      "// $TM_FILENAME",
      "// info:$0",
      "// date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      "// auth : danao",
      "// version : 0.1",
      ""
    ],
    "description": "创建一个[main]函数"
  },
  "self_go_logging": {
    "scope": "go",
    "prefix": "imlog",
    "body": [
      "// 配置日志输出",
      "func configLog() {",
      "    // 创建日志文件",
      "    file, err := os.OpenFile(\"app.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)",
      "    if err != nil {",
      "        log.Fatal(\"无法创建日志文件:\", err)",
      "    }",
      "    defer file.Close()",
      "",
      "    // 设置同时输出到控制台和文件",
      "    log.SetOutput(io.MultiWriter(os.Stdout, file))",
      "    log.SetFlags(log.LstdFlags | log.Lshortfile)",
      "",
      "    // 输出日志",
      "    // log.Println(\"这是一个标准日志信息\")",
      "    // log.Printf(\"这是一个带参数的日志信息：%s\", \"参数值\")",
      "    // log.Panic(\"发生了一个致命错误\")",
      "}"
    ],
    "description": "导入 log 模块并配置"
  },
  "self_go_main": {
    "scope": "go",
    "prefix": "smain",
    "body": ["package main", "", "func main() {", "  $0", "}"],
    "description": "创建一个[main]函数"
  },
  "self_go_var": {
    "scope": "go",
    "prefix": "svar",
    "body": ["${1:var_name} := ${2:\"\"}"],
    "description": "创建一个变量"
  },
  "self_go_array": {
    "scope": "go",
    "prefix": "sarr",
    "body": ["arr = [$1]"],
    "description": "创建一个[数组]结构"
  },
  "self_go_list": {
    "scope": "go",
    "prefix": "slist",
    "body": [
      "list := make([]string, 0)",
      "log.Printf(\"list = [%+v]\\n\", list)"
    ],
    "description": "创建一个[list]结构"
  },
  "self_go_set": {
    "scope": "go",
    "prefix": "sset",
    "body": [""],
    "description": "创建一个[set]结构"
  },
  "self_go_map": {
    "scope": "go",
    "prefix": "smap",
    "body": [
      "res := make(map[string]${1:interface{}})",
      "res[\"key\"] = \"value\""
    ],
    "description": "创建一个[map]结构"
  },
  "self_go_now": {
    "scope": "go",
    "prefix": "snow",
    "body": [""],
    "description": "获取当前时间"
  },
  "self_go_log": {
    "scope": "go",
    "prefix": "slog",
    "body": [
      "log.Printf(\"${1:var_name} = [%+v]\\n\", ${1:var_name})",
      "// 特殊字符需要使用 string() 函数",
      "// log.Printf(\"${1:var_name} = [%+v]\\n\", string(${1:var_name}))"
    ],
    "description": "创建一个日志"
  },
  "self_go_error_log": {
    "scope": "go",
    "prefix": "errlog",
    "body": ["log.Println(\"$1异常,异常信息如下:\", err)"],
    "description": "打印错误日志"
  },
  "self_go_error_log_exit": {
    "scope": "go",
    "prefix": "errlogexit",
    "body": ["log.Fatal(\"$1异常,异常信息如下:\", err)"],
    "description": "打印错误日志"
  },
  "self_go_print": {
    "scope": "go",
    "prefix": "sout",
    "body": ["fmt.Println(\"原生输出======>\", ${1:var_name})"],
    "description": "创建一个打印输出"
  },
  "self_go_object": {
    "scope": "go",
    "prefix": "sobject",
    "body": [""],
    "description": "创建一个[object]结构"
  },
  "self_go_tojson": {
    "scope": "go",
    "prefix": "tojson",
    "body": [
      "// 字符串转格式化json 则 替换 str",
      "res := make(map[string]interface{})",
      "json.Unmarshal([]byte(str), &res)",
      "// 对象转json格式化 则替换 res",
      "jsonBytes, _ := json.MarshalIndent(res, \"\", \"    \")",
      "log.Printf(\"json格式化如下:\\n%+v\\n\", string(jsonBytes))"
    ],
    "description": "obj 转 json"
  },
  "self_go_toobj": {
    "scope": "go",
    "prefix": "toobj",
    "body": [""],
    "description": "json 转 obj"
  },
  "self_go_class_note": {
    "scope": "go",
    "prefix": "//class",
    "body": [""],
    "description": "结构体注释"
  },
  "self_go_method_note": {
    "scope": "go",
    "prefix": "//method",
    "body": ["// $1 函数的作用是:$2"],
    "description": "函数注释"
  },
  "self_go_flag": {
    "scope": "go",
    "prefix": "sflag",
    "body": [
      "var (",
      "   // 定义一个名为 \"help\" 的布尔参数，默认值为 false",
      "    help    = flag.Bool(\"help\", false, \"获取帮助\")",
      "    version = flag.Bool(\"version\", false, \"显示版本号\")",
      "    input   = flag.String(\"input\", \"\", \" 输入参数\")",
      "    output  = flag.String(\"output\", \"\", \"输出参数\")",
      ")",
      "",
      "// 需要使用参数，则在 main 函数中调用此函数",
      "func args() {",
      "    // 解析命令行参数",
      "    flag.Parse()",
      "    // 根据需要使用命令行参数的值",
      "    if *help {",
      "        // 显示帮助信息",
      "        fmt.Println(\"用法: 此应用程序 需要输入一下参数 [参数列表]\")",
      "        fmt.Println(\"参数说明:\")",
      "        flag.PrintDefaults()",
      "        os.Exit(0)",
      "        return",
      "    }",
      "    if *version {",
      "        // 显示版本信息",
      "        fmt.Println(\"Version: 1.0\")",
      "        os.Exit(0)",
      "        return",
      "    }",
      "",
      "    //  此处对必填的参数进行判断，如果没赋值，则提示帮助信息",
      "    if *input != \"\" && *output != \"\" {",
      "        return",
      "    } else {",
      "        fmt.Println(\"错误: input 和 output 参数是必填的.\")",
      "        fmt.Println(\"用法: 此应用程序 需要输入一下参数 [参数列表]\")",
      "        fmt.Println(\"参数说明:\")",
      "        flag.PrintDefaults()",
      "        os.Exit(0)",
      "        return",
      "    }",
      "}"
    ],
    "description": "脚本入参模板"
  },
  "self_go_field": {
    "scope": "go",
    "prefix": "fjson",
    "body": ["${1:Name} ${2:string} `json:\"${3:json}\"`"],
    "description": "函数注释"
  },
  // ==============================================================================================
  // markdown
  // ==============================================================================================
  "接口文档模板": {
    "scope": "markdown",
    "prefix": "sdoc",
    "body": [
      "# $1接口",
      "",
      "- 接口功能说明",
      "",
      "  该接口实现的功能是:用户进行注册",
      "",
      "- 接口调用方式",
      "",
      "- 接口调用类型：HTTP POST",
      "",
      "- URL 样例：http://127.0.0.1:8080/api/test",
      "",
      "- 接口输入数据格式",
      "",
      "  | 序号 | 数据字段 | 字段解释 | 是否必需 | 数据格式 | 候选参数 | 备注信息 |",
      "  | ---- | -------- | -------- | -------- | -------- | -------- | -------- |",
      "  | 1    | key     | 请求 key | 是       |string     |          | 前端输入 |",
      "",
      "- post 数据样例",
      "",
      "  ```json",
      "  {",
      "    \"key\": \"女\",",
      "    \"key2\": 10",
      "  }",
      "  ```",
      "",
      "- 接口输出数据格式",
      "",
      "  | 序号 | 数据字段 | 字段解释 | 数据格式 | 候选参数        | 备注信息 |",
      "  | ---- | -------- | -------- | -------- | --------------- | -------- |",
      "  | 1    | code     | 响应码   | int      | 200             |          |",
      "  | 2    | msg      | 响应消息 | string   | success         |          |",
      "  | 3    | data     | 相应数据 | json     | {\"key\":\"value\"} |          |",
      "",
      "- 响应样例",
      "",
      "  ```json",
      "  {",
      "    \"code\": 200,",
      "    \"msg\": \"操作成功\",",
      "    \"data\": {}",
      "  }",
      "  ```"
    ],
    "description": "接口文档模板"
  }
}
