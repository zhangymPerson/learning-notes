" Source your .vimrc
source ~/.vimrc

" vim action 查找
" 双击 shift + shift 快速跳转
" 打开 Action 页面
" 输入 IdeaVim: Track Action IDs 打开此项配置
" 当有需要的快捷键 或者执行 Action 时，会弹窗提示 vim 中的 Action ID 值
" 然后在 ideavim 中 配置成自己需要的快捷键

" win 下 配置
" source D:\\Program Files\\Vim\\_vimrc

" 插件 github vim 插件
" https://github.com/JetBrains/ideavim
" vim whick-key 提示
" https://github.com/TheBlob42/idea-which-key
" Find more examples here: https://jb.gg/share-ideavimrc
" IdeaVim actions
" 函数跳转

" 可以令屏幕滚动时在光标上下方保留5行预览代码（也就是光标会在第5行触发向上滚动，或者在倒数第5行触发向下滚动）。
let mapleader=" "
set so=5

nmap [[ :action MethodUp<CR>
nmap ]] :action MethodDown<CR>

nmap L :action NextTab<CR>
nmap H :action PreviousTab<CR>

set which-key
set notimeout

" ========================================
nmap gb :action Back<CR>
" 跳转到文件所在目录位置
nmap gf :action SelectInProjectView<CR>
nmap gi :action GotoImplementation<CR>
nmap ge :action GotoNextError<CR>
nmap t :action Switcher<CR>

" =c=======================================
" leader + c 注释
let g:WhichKeyDesc_C = "<leader>c +代码"
" 添加注释
let g:WhichKeyDesc_C_line = "<leader>cl 代码注释"
nmap <leader>cl :action CommentByLineComment<CR>
" 格式化代码
let g:WhichKeyDesc_C_F_formatCode = "<leader>cf 代码-格式化代码"
nmap <leader>cf :action ReformatCode<CR>
" 格式化代码
let g:WhichKeyDesc_C_I_optimize_import = "<leader>ci 代码-去掉多余的包"
nmap <leader>ci :action OptimizeImports<CR>
" 变量重命名
let g:WhichKeyDesc_C_N_rename = "<leader>cn 代码-变量重命名"
nmap <leader>cn :action RenameElement<CR>
" 查看文档
let g:WhichKeyDesc_C_d = "<leader>cd 显示函数文档"
nmap <leader>cd :action QuickJavaDoc<CR>
let g:WhichKeyDesc_C_D = "<leader>cD 显示函数文档内容"
nmap <leader>cD :action QuickImplementations<CR>
let g:WhichKeyDesc_C_s = "<leader>cs 查看文件中的属性函数"
nmap <leader>cs :action FileStructurePopup<CR>
let g:WhichKeyDesc_C_p = "<leader>cp 查看函数变量"
nmap <leader>cp :action ParameterInfo<CR>

" =e=======================================
" leader + E 扩展
let g:WhichKeyDesc_E = "<leader>e +extract"
" e: Extract
" extract method/function
let g:WhichKeyDesc_E_method = "<leader>em 生成-函数"
vmap <leader>em :action ExtractMethod<CR>
" extract constant
let g:WhichKeyDesc_E_constant = "<leader>ec 生成-常量"
vmap <leader>ec :action IntroduceConstant<CR>
" extract field
let g:WhichKeyDesc_E_field = "<leader>ef 生成-属性"
vmap <leader>ef :action IntroduceField<CR>
" extract variable
let g:WhichKeyDesc_E_var = "<leader>ev 生成变量"
vmap <leader>ev :action IntroduceVariable<CR>

" =e=======================================
" 打开目录
let g:WhichKeyDesc_E = "<leader>e 打开目录"
nmap <leader>e :NERDTreeToggle<CR>

" =f=======================================
" leader + f 查找类
let g:WhichKeyDesc_F = "<leader>f +查找/文件"
" 快速打开全局搜索
let g:WhichKeyDesc_F_FindInPath = "<leader>f/ 全局查找"
nmap <leader>f/ :action FindInPath<CR>
" 快速打开全局替换
let g:WhichKeyDesc_F_ReplaceInPath = "<leader>fr 全局查找并替换"
nmap <leader>fr :action ReplaceInPath<CR>
" 查找类 方法 工作
let g:WhichKeyDesc_F_class = "<leader>fc 查找-类"
nmap <leader>fc :action GotoClass<CR>
let g:WhichKeyDesc_F_usages = "<leader>fu 查找-引用"
nmap <leader>fu :action FindUsages<CR>
let g:WhichKeyDesc_F_usages_show = "<leader>fs 查看-引用"
nmap <leader>fs :action ShowUsages<CR>
let g:WhichKeyDesc_F_symbol = "<leader>fS 查找-指定属性"
nmap <leader>fS :action GotoSymbol<CR>
let g:WhichKeyDesc_F_action = "<leader>fa 查找-动作"
nmap <leader>fa :action GotoAction<CR>
let g:WhichKeyDesc_F_newFile = "<leader>fn 新建文件"
nmap <leader>fn :action NewFile<CR>
" 定位当前文件
let g:WhichKeyDesc_F_file = "<leader>ff 文件-定位当前文件"
nmap <leader>ff :action SelectInProjectView<CR>
" 打开当前文件的历史提交记录
let g:WhichKeyDesc_F_history = "<leader>fh 文件-文件历史改动"
nmap <leader>fh :action Vcs.ShowTabbedFileHistory<CR>

let g:WhichKeyDesc_F_close = "<leader>fx 关闭其他 tab"
nmap <leader>fx :action CloseAllEditorsButActive<CR>

" =g=======================================
" leader + g 跳转类
let g:WhichKeyDesc_G = "<leader>g +跳转/git"
" 返回到上一个光标位置
let g:WhichKeyDesc_G_back = "<leader>gb 跳转到上一步"
nmap <leader>gb :action Back<CR>
" 光标前进
let g:WhichKeyDesc_G_foreard = "<leader>gn 前进一步"
nmap <leader>gn :action Forward<CR>
" 跳转到当前文件所在位置
let g:WhichKeyDesc_G_file = "<leader>gf 跳转到当前文件所在位置"
nmap <leader>gf :action SelectInProjectView<CR>
" 跳转到实现类方法中
let g:WhichKeyDesc_G_impl = "<leader>gd 跳转到实现位置"
nmap <leader>gd :action GotoImplementation<CR>
" 快速跳转到错误位置
let g:WhichKeyDesc_G_error = "<leader>ge 跳转到错误位置"
nmap <leader>ge :action GotoNextError<CR>
" 快速提交窗口
let g:WhichKeyDesc_G_commit = "<leader>gc 打开提交窗口"
nmap <leader>gc :action ActivateCommitToolWindow<CR>
" 快速打开git标签
let g:WhichKeyDesc_G_tag = "<leader>gg 快速跳转到当前文件的 git 记录"
nmap <leader>gg :action Vcs.ShowTabbedFileHistory<CR>

" =h=======================================
" leader + h 扩展
let g:WhichKeyDesc_H = "<leader>h +帮助"
" 查看所有的 action 动作
let g:WhichKeyDesc_H_list = "<leader>hl 查看所有idea的action"
nmap <leader>hl :action GotoAction<CR>
" 在 vim 模式下输入 :actionlist 可以查看所有 actions 名称
let g:WhichKeyDesc_H_search = "<leader>hs 模糊查看所有idea的action"
nmap <leader>hs :actionlist

" =m=======================================
let g:WhichKeyDesc_m = "<leader>m +书签"
let g:WhichKeyDesc_m_bookmarks = "<leader>mm 书签操作"
nmap <leader>mm :action Bookmarks<CR>
let g:WhichKeyDesc_m_bookmarks_list = "<leader>ml 书签列表"
nmap <leader>ml :action ShowBookmarks<CR>

" =p=======================================
" leader + p 项目相关的操作
let g:WhichKeyDesc_P = "<leader>p +项目/插件"
" 快速启动 debug run stop 项目
let g:WhichKeyDesc_P_debug = "<leader>pd +debug"
let g:WhichKeyDesc_P_P_debug = "<leader>pdd debug-添加断点"
nmap <leader>pdd :action ToggleLineBreakpoint<CR>
let g:WhichKeyDesc_P_P_debug_list = "<leader>pdl debug-断点列表"
nmap <leader>pdl :action ViewBreakpoints<CR>
let g:WhichKeyDesc_P_P_debug_run = "<leader>pde debug-设置debug表达式"
nmap <leader>pde :action EvaluateExpression<CR>

let g:WhichKeyDesc_P_stop = "<leader>ps stop-项目"
nmap <leader>ps :action Stop<CR>
let g:WhichKeyDesc_P_run = "<leader>pr run-项目"
nmap <leader>pr :action Debug<CR>
let g:WhichKeyDesc_P_View = "<leader>pv debug-视图"
map <leader>pv :action ActivateDebugToolWindow<CR>
" 需要安装 ApiFox 插件
let g:WhichKeyDesc_P_search = "<leader>p/ 查询项目接口"
nmap <leader>p/ :action ApiFoxSearch<CR>
" 插件操作入口
let g:WhichKeyDesc_P_plugin = "<leader>pp +插件操作"
let g:WhichKeyDesc_P_plugin_tongyi = "<leader>ppt 通义灵码"
nmap <leader>ppt :action TriggerCosySelectionChatAction<CR>
let g:WhichKeyDesc_P_plugin_ApiFox = "<leader>ppa apifox"
nmap <leader>ppa :action ActivateApifoxToolWindow<CR>
let g:WhichKeyDesc_P_plugin_mybatis = "<leader>ppm mybatis"
nmap <leader>ppm :action ActivateMybatisSqlToolWindow<CR>
let g:WhichKeyDesc_P_plugin_view = "<leader>ppp view"
nmap <leader>ppp :action WelcomeScreen.Plugins<CR>

" =q=======================================
let g:WhichKeyDesc_Q = "<leader>q +快速操作"
let g:WhichKeyDesc_Q_quickfix = "<leader>qf 快速打开错误"
nmap <leader>qf :action ShowIntentionActions<CR>

" =s=======================================
let g:WhichKeyDesc_S = "<leader>s +setting"
let g:WhichKeyDesc_S_setting = "<leader>ss 打开配置页面"
nmap <leader>ss :action ShowSettings<CR>

" =t=======================================
" leader + t 扩展
let g:WhichKeyDesc_T = "<leader>t  +tab/翻译"
" 翻译 需要翻译插件的支持
let g:WhichKeyDesc_T_translate = "<leader>tw 翻译单词"
map <leader>tw :action Translation.EditorTranslateAction<CR>
let g:WhichKeyDesc_T_translateDoc = "<leader>td 翻译段落"
map <leader>td :action Translation.EditorTranslateAction<CR>
let g:WhichKeyDesc_T_translate_show = "<leader>ts 显示对话框"
map <leader>ts :action Translation.ShowTranslationDialogAction<CR>
nmap <leader>to :action Switcher<CR>
let g:WhichKeyDesc_T_next_tab = "<leader>tn 跳转tab"
nmap <leader>tn :action NextSplitter<CR>

" =v=======================================
let g:WhichKeyDesc_V = "<leader>v 打开当前文件的视图"
let g:WhichKeyDesc_V_Structure = "<leader>vf 查看函数"
map <leader>vf :action FileStructurePopup<CR>
let g:WhichKeyDesc_V_Structure_show = "<leader>vd 代码注释用渲染的方式展示"
" 配置 setting -> editor -> general -> appearance -> Render documentation comments
map <leader>vd :action ToggleRenderedDocPresentationForAll<CR>

" =x=======================================
let g:WhichKeyDesc_x = "<leader>x 关闭当前文件"
nmap <leader>x :action CloseEditor<CR>
let g:WhichKeyDesc_X = "<leader>X  打开刚关闭的文件"
nmap <leader>X :action ReopenClosedTab<CR>

" =w=======================================
let g:WhichKeyDesc_w = "<leader>w 窗口操作"
let g:WhichKeyDesc_W_Z = "<leader>wz  进入/退出 全屏模式"
map <leader>wz :action ToggleDistractionFreeMode<CR>
let g:WhichKeyDesc_W_H = "<leader>wa  编辑区最大化"
map <leader>wa :action HideAllWindows<CR>
let g:WhichKeyDesc_W_n = "<leader>wn 跳转到下一个分屏"
map <leader>wn :action NextSplitter<CR>
let g:WhichKeyDesc_W_b = "<leader>wb 最大化当前分屏"
map <leader>wm :action MaximizeEditorInSplit<CR>

" ========================================
" 跳转到 terminal 快捷方式
let g:WhichKeyDesc_terminal = "<leader>!  进入/退出 terminal 模式"
nmap <leader>! :action ActivateTerminalToolWindow<CR>

set ideajoin


" ========================================
" 通义灵码 插件
let g:WhichKeyDesc_A = "通义灵码 插件"
" 打开通义灵码
let g:WhichKeyDesc_A_open = "<leader>ao 打开通义灵码"
nmap <leader>ao :action TriggerCosySelectionChatAction<CR>
let g:WhichKeyDesc_A_code = "`` 代码补全"
imap `` :action TriggerInlayCompletionAction<CR>
let g:WhichKeyDesc_A_test = "<leader>at 测试代码"
vmap <leader>at :action TriggerCosyTestcaseGenerationAction<CR>
let g:WhichKeyDesc_A_comment = "<leader>ac 生成注释"
vmap <leader>ac :action TriggerCosyCodeGenerateCommentGenerationAction<CR>
let g:WhichKeyDesc_A_explain = "<leader>ae 解释代码"
vmap <leader>ae :action TriggerCosyExplainCodeGenerationAction<CR>
let g:WhichKeyDesc_A_optimize = "<leader>an 优化代码"
vmap <leader>an :action TriggerCosyOptimizeCodeGenerationAction<CR>
let g:WhichKeyDesc_A_git = "<leader>ag 生成 git commit"
nmap <leader>ag :action TriggerCosyCommitMessageGenerationAction<CR>


" ========================================
" 单个文件内快速跳转
" idea easymotion 插件依赖
set easymotion
let g:WhichKeyDesc_s = "跳转到当前文件内"
nmap s <Plug>(easymotion-s)
let g:WhichKeyDesc_f = "跳转到当前文件内"
nmap f <Plug>(easymotion-f)

" https://github.com/JetBrains/ideavim/wiki/NERDTree-support
set NERDTree

" 可以使用 s 实现类似 f 单行查找的效果，可以查找2个字符的内容
" https://github.com/justinmk/vim-sneak
set sneak

" vim-surround 插件
" https://github.com/tpope/vim-surround
set vim-surround

" 参数文本对象插件：提供 'a'（around）和 'i'（inside）文本对象，用于快速选择函数参数
Plug 'vim-scripts/argtextobj.vim'

" 增强文本对象选择：扩展 a/i 操作符的上下文识别能力（如识别更复杂的文本边界）
set mini-ai

" 启用增强型匹配插件：支持 % 键在不同语言中跳转匹配标签（HTML/XML标签、控制结构等）
packadd matchit

" 高亮显示复制/粘贴的内容，持续时间为5000毫秒（5秒）
let g:highlightedyank_highlight_duration = 5000
" 启用 vim-highlightedyank 插件，用于高亮显示最近操作的文本
Plug 'machakann/vim-highlightedyank'
" Alt + Enter 快捷键用于触发 IntelliJ IDEA 的快速修复功能

# AceJump 插件
" 按 `f` 激活 AceJump
map f :action AceAction<CR>
" 按 `F` 激活目标模式
map F :action AceTargetAction<CR>
" 按 `g` 激活行模式
" map g :action AceLineAction<CR>

" 在正常模式下按 `S` 在光标前激活 AceJump 模式
nmap S :action AceBackwardAction<CR>

" 在正常模式下按 `s` 在光标后激活 AceJump 模式
nmap s :action AceForwardAction<CR>