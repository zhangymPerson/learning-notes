# openapi yaml 配置说明

# 必选. 这个字符串必须是开放API规范版本号提到的符合语义化版本号规范的版本号。openapi字段应该被工具或者客户端用来解释 OpenAPI 文档。这个值和API info.version字符串没有关联。
openapi: 3.0.3

# 这个对象提供API的元数据。如果客户端需要时可能会用到这些元数据，而且可能会被呈现在编辑工具或者文档生成工具中。
# 必选。此字段提供API相关的元数据。相关工具可能需要这个字段。
info:
  # 必选. 应用的名称。
  title: 项目的 api 文档
  description: |-
    项目 api 的介绍，支持 markdown 的语法 
    连接 [https://swagger.io](https://swagger.io).
  # 服务的项目组联系方式
  termsOfService: http://swagger.io/terms/
  # 联系方式
  contact:
    email: zhangyanmingjiayou@163.com
  #  项目使用的开源协议
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  # 必选. API文档的版本信息（注意：这个版本和开放API规范版本没有任何关系）。
  version: 1.0.11

# 文档描述的扩展 附加的文档。这个对象可能会被规范扩展扩展。
externalDocs:
  description: Find out more about Swagger api 描述扩展
  url: http://swagger.io

# 这是一个Server对象的数组， 提供到服务器的连接信息。如果没有提供servers属性或者是一个空数组，那么默认为是url值为/的 Server 对象 。
servers:
  - url: https://petstore3.swagger.io/api/v3
    description: 开发环境
    variables:
      # Server Variable 对象
      # 表示可用于服务器URL地址模板变量替换的对象。
      port:
        # 一组可枚举字符串值，当可替换选项只能设置为固定的某些值时使用。
        enum:
          - "8443"
          - "443"
        # 必选. 当可替换的值没有被使用者指定时使用的默认值。不像Schema 对象's的 default ，这个值必须由使用者提供。
        default: "8443"
      username:
        default: demo
        description: this value is assigned by the service provider, in this example `gigantic-server.com`
      basePath:
        # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
        default: v3
      petId:
        default: "1"
  - url: https://staging.danao.com/v1
    description: 预览环境
  - url: https://api.danao.com/v1
    description: 生成环境

# 提供更多元数据的一系列标签，标签的顺序可以被转换工具用来决定API的顺序。不是所有被Operation 对象用到的标签都必须被声明。
# 没有被声明的标签可能被工具按自己的逻辑任意整理，每个标签名都应该是唯一的。
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more
      url: http://swagger.io

# 请求 api 说明
paths:
  # 单个 api 请求的地址
  /user:
    # 请求方式
    post:
      # 请求所述的 tags
      tags:
        - user
      # 接口的简要说明
      summary: 创建新用户
      # 接口的详细说明
      description: 创建一个新用户方便用户登录
      # 接口的id
      operationId: createUser
      requestBody:
        # 请求参数的描述
        description: 创建一个用户对象
        # 请求对象的说明
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: 创建多个用户
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: 用户登录系统
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: 登录的用户名
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: 登录用户的密码
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: 退出登录
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: 获取用户信息
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: 更新用户信息
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: 删除用户信息
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

# 一个包含多种结构的元素。
components:
  # 定义可重用的 Schema 对象 的对象。
  # Schema 对象 用于定义输入和输出的数据类型。这些类型可以是对象，但也可以是原始值和数组。这个对象是 JSON Schema Specification Wright Draft 00 扩展后的子集.
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
  # 定义可重用的 Request Body 对象 的对象。
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  # 定义可重用的 Security Scheme 对象 的对象。
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
